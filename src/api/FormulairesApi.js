/**
 * HelloAsso API
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HelloAssoApiV5ModelsEnumsFormState from '../model/HelloAssoApiV5ModelsEnumsFormState';
import HelloAssoApiV5ModelsEnumsFormType from '../model/HelloAssoApiV5ModelsEnumsFormType';
import HelloAssoApiV5ModelsFormsFormPublicModel from '../model/HelloAssoApiV5ModelsFormsFormPublicModel';
import HelloAssoApiV5ModelsFormsFormQuickCreateModel from '../model/HelloAssoApiV5ModelsFormsFormQuickCreateModel';
import HelloAssoApiV5ModelsFormsFormQuickCreateRequest from '../model/HelloAssoApiV5ModelsFormsFormQuickCreateRequest';
import ResultsWithPaginationModelFormLightModel from '../model/ResultsWithPaginationModelFormLightModel';

/**
* Formulaires service.
* @module api/FormulairesApi
* @version public
*/
export default class FormulairesApi {

    /**
    * Constructs a new FormulairesApi. 
    * @alias module:api/FormulairesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organizationsOrganizationSlugFormTypesGet operation.
     * @callback module:api/FormulairesApi~organizationsOrganizationSlugFormTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsFormType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir une liste des types de formulaires pour une organisation
     * Liste tous les types de formulaires où l'organisation possède au moins un formulaire. Cela peut également être filtré par états.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
     * @param {String} organizationSlug The organization Slug
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsFormState>} [states] List of Form States to filter with. If none specified, it won't filter results.  Available values: * `Public` - The form is publicly visible and findable on search engines * `Private` - The form is visible only with the URL, you cannot find it on search engines * `Draft` - The form is not yet published but visible if you have admin rights * `Disabled` - The form is disabled and can be reenabled by changing state to public or private
     * @param {module:api/FormulairesApi~organizationsOrganizationSlugFormTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HelloAssoApiV5ModelsEnumsFormType>}
     */
    organizationsOrganizationSlugFormTypesGet(organizationSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugFormTypesGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [HelloAssoApiV5ModelsEnumsFormType];
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/formTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugFormsFormTypeActionQuickCreatePost operation.
     * @callback module:api/FormulairesApi~organizationsOrganizationSlugFormsFormTypeActionQuickCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoApiV5ModelsFormsFormQuickCreateModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Créer un événement simplifié pour un organisme
     * Permet la création d'un événement avec seulement des informations limitées et quelques tarifications simples. L'événement créé de cette manière peut être modifié ultérieurement avec d'autres services<br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> FormAdministration<br/><br/>
     * @param {String} organizationSlug The organization Slug
     * @param {module:model/HelloAssoApiV5ModelsEnumsFormType} formType The form type to create - only Event type is supported
     * @param {Object} opts Optional parameters
     * @param {module:model/HelloAssoApiV5ModelsFormsFormQuickCreateRequest} [helloAssoApiV5ModelsFormsFormQuickCreateRequest] The body of the request.
     * @param {module:api/FormulairesApi~organizationsOrganizationSlugFormsFormTypeActionQuickCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoApiV5ModelsFormsFormQuickCreateModel}
     */
    organizationsOrganizationSlugFormsFormTypeActionQuickCreatePost(organizationSlug, formType, opts, callback) {
      opts = opts || {};
      let postBody = opts['helloAssoApiV5ModelsFormsFormQuickCreateRequest'];
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugFormsFormTypeActionQuickCreatePost");
      }
      // verify the required parameter 'formType' is set
      if (formType === undefined || formType === null) {
        throw new Error("Missing the required parameter 'formType' when calling organizationsOrganizationSlugFormsFormTypeActionQuickCreatePost");
      }

      let pathParams = {
        'organizationSlug': organizationSlug,
        'formType': formType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoApiV5ModelsFormsFormQuickCreateModel;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/forms/{formType}/action/quick-create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugFormsFormTypeFormSlugPublicGet operation.
     * @callback module:api/FormulairesApi~organizationsOrganizationSlugFormsFormTypeFormSlugPublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoApiV5ModelsFormsFormPublicModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir des données publiques détaillées sur un formulaire
     * Permet de récupérer toutes les informations publiques d'un formulaire, qu'il s'agisse de Crowdfunding, d'Adhésion, d'Événement, de Don...<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
     * @param {String} organizationSlug 
     * @param {module:model/HelloAssoApiV5ModelsEnumsFormType} formType 
     * @param {String} formSlug 
     * @param {module:api/FormulairesApi~organizationsOrganizationSlugFormsFormTypeFormSlugPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoApiV5ModelsFormsFormPublicModel}
     */
    organizationsOrganizationSlugFormsFormTypeFormSlugPublicGet(organizationSlug, formType, formSlug, callback) {
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugFormsFormTypeFormSlugPublicGet");
      }
      // verify the required parameter 'formType' is set
      if (formType === undefined || formType === null) {
        throw new Error("Missing the required parameter 'formType' when calling organizationsOrganizationSlugFormsFormTypeFormSlugPublicGet");
      }
      // verify the required parameter 'formSlug' is set
      if (formSlug === undefined || formSlug === null) {
        throw new Error("Missing the required parameter 'formSlug' when calling organizationsOrganizationSlugFormsFormTypeFormSlugPublicGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug,
        'formType': formType,
        'formSlug': formSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoApiV5ModelsFormsFormPublicModel;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugFormsGet operation.
     * @callback module:api/FormulairesApi~organizationsOrganizationSlugFormsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsWithPaginationModelFormLightModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir les formulaires d'une organisation
     * Liste tous les formulaires correspondant aux états et types. Si aucun filtre n'est spécifié, aucun filtre n'est appliqué. Les résultats sont classés par date de création en ordre décroissant.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
     * @param {String} organizationSlug The organization Slug
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsFormState>} [states] States to filter  Available values: * `Public` - The form is publicly visible and findable on search engines * `Private` - The form is visible only with the URL, you cannot find it on search engines * `Draft` - The form is not yet published but visible if you have admin rights * `Disabled` - The form is disabled and can be reenabled by changing state to public or private
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsFormType>} [formTypes] Types to filter
     * @param {Number} [pageIndex = 1)] The page of results to retrieve
     * @param {Number} [pageSize = 20)] The number of items per page
     * @param {String} [continuationToken] Continuation Token from which we wish to retrieve results
     * @param {module:api/FormulairesApi~organizationsOrganizationSlugFormsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsWithPaginationModelFormLightModel}
     */
    organizationsOrganizationSlugFormsGet(organizationSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugFormsGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi'),
        'formTypes': this.apiClient.buildCollectionParam(opts['formTypes'], 'multi'),
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'continuationToken': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ResultsWithPaginationModelFormLightModel;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/forms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
