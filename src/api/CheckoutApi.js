/**
 * HelloAsso API
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HelloAssoApiV5ModelsCartsCheckoutIntentResponse from '../model/HelloAssoApiV5ModelsCartsCheckoutIntentResponse';
import HelloAssoApiV5ModelsCartsInitCheckoutBody from '../model/HelloAssoApiV5ModelsCartsInitCheckoutBody';
import HelloAssoApiV5ModelsCartsInitCheckoutResponse from '../model/HelloAssoApiV5ModelsCartsInitCheckoutResponse';

/**
* Checkout service.
* @module api/CheckoutApi
* @version public
*/
export default class CheckoutApi {

    /**
    * Constructs a new CheckoutApi. 
    * @alias module:api/CheckoutApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdGet operation.
     * @callback module:api/CheckoutApi~organizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoApiV5ModelsCartsCheckoutIntentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Récupérer une intention de paiement
     * Retourne aussi la commande associée. Uniquement dans le cas ou le paiement est autorisé.<br/><br/><b>Votre clientId doit avoir ces autorisations : </b> <br/> Checkout<br/><br/>
     * @param {String} organizationSlug 
     * @param {Number} checkoutIntentId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withFailedRefundOperation = false)] 
     * @param {module:api/CheckoutApi~organizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoApiV5ModelsCartsCheckoutIntentResponse}
     */
    organizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdGet(organizationSlug, checkoutIntentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdGet");
      }
      // verify the required parameter 'checkoutIntentId' is set
      if (checkoutIntentId === undefined || checkoutIntentId === null) {
        throw new Error("Missing the required parameter 'checkoutIntentId' when calling organizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug,
        'checkoutIntentId': checkoutIntentId
      };
      let queryParams = {
        'withFailedRefundOperation': opts['withFailedRefundOperation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoApiV5ModelsCartsCheckoutIntentResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/checkout-intents/{checkoutIntentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugCheckoutIntentsPost operation.
     * @callback module:api/CheckoutApi~organizationsOrganizationSlugCheckoutIntentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoApiV5ModelsCartsInitCheckoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialisation d'un Checkout
     * Pour tout savoir sur Checkout consultez d'abord notre <a href=\"https://dev.helloasso.com/docs/description\">documentation</a><br/><br/><b>Votre clientId doit avoir ces autorisations : </b> <br/> Checkout<br/><br/>
     * @param {String} organizationSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/HelloAssoApiV5ModelsCartsInitCheckoutBody} [helloAssoApiV5ModelsCartsInitCheckoutBody] 
     * @param {module:api/CheckoutApi~organizationsOrganizationSlugCheckoutIntentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoApiV5ModelsCartsInitCheckoutResponse}
     */
    organizationsOrganizationSlugCheckoutIntentsPost(organizationSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['helloAssoApiV5ModelsCartsInitCheckoutBody'];
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugCheckoutIntentsPost");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoApiV5ModelsCartsInitCheckoutResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/checkout-intents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
