/**
 * HelloAsso API
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HelloAssoApiV5ModelsEnumsFormType from '../model/HelloAssoApiV5ModelsEnumsFormType';
import HelloAssoApiV5ModelsEnumsPaymentState from '../model/HelloAssoApiV5ModelsEnumsPaymentState';
import HelloAssoApiV5ModelsEnumsSortField from '../model/HelloAssoApiV5ModelsEnumsSortField';
import HelloAssoApiV5ModelsEnumsSortOrder from '../model/HelloAssoApiV5ModelsEnumsSortOrder';
import HelloAssoApiV5ModelsPaymentRefundOperationModel from '../model/HelloAssoApiV5ModelsPaymentRefundOperationModel';
import HelloAssoApiV5ModelsStatisticsPaymentDetail from '../model/HelloAssoApiV5ModelsStatisticsPaymentDetail';
import ResultsWithPaginationModelPayment from '../model/ResultsWithPaginationModelPayment';
import ResultsWithPaginationModelPublicPaymentModel from '../model/ResultsWithPaginationModelPublicPaymentModel';

/**
* Paiements service.
* @module api/PaiementsApi
* @version public
*/
export default class PaiementsApi {

    /**
    * Constructs a new PaiementsApi. 
    * @alias module:api/PaiementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet operation.
     * @callback module:api/PaiementsApi~organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsWithPaginationModelPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir les informations des paiements effectués sur un formulaire
     * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
     * @param {String} organizationSlug The organization slug
     * @param {String} formSlug The form slug
     * @param {module:model/HelloAssoApiV5ModelsEnumsFormType} formType The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
     * @param {Object} opts Optional parameters
     * @param {Date} [from] First Date Filter
     * @param {Date} [to] End Date Filter (exclusive)
     * @param {String} [userSearchKey] Filter results on user or payer first name, last name or email
     * @param {Number} [pageIndex = 1)] The page of results to retrieve
     * @param {Number} [pageSize = 20)] The number of items per page
     * @param {String} [continuationToken] Continuation Token from which we wish to retrieve results
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsPaymentState>} [states] Filter results by states of payments  Available values: * `Pending` - A payment scheduled at a later date, not yet processed. * `Authorized` - The payment has been authorized, validated, processed. * `Refused` - The payment has been refused by the bank. * `Unknown` * `Registered` - Represents a payment made offline.              Probably for an item of type * `Refunded` - The payment has been refunded. * `Refunding` - The payment is being refunded. * `Contested` - Payment has been contested by the contributor
     * @param {module:model/HelloAssoApiV5ModelsEnumsSortOrder} [sortOrder] Sort payments by ascending or descending order. Default is descending
     * @param {module:model/HelloAssoApiV5ModelsEnumsSortField} [sortField] Sort payments by a specific field (Date or UpdateDate). Default is date
     * @param {Boolean} [withCount = false)] Whether the pagination should include totalCount and totalPages.
     * @param {module:api/PaiementsApi~organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsWithPaginationModelPayment}
     */
    organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet(organizationSlug, formSlug, formType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet");
      }
      // verify the required parameter 'formSlug' is set
      if (formSlug === undefined || formSlug === null) {
        throw new Error("Missing the required parameter 'formSlug' when calling organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet");
      }
      // verify the required parameter 'formType' is set
      if (formType === undefined || formType === null) {
        throw new Error("Missing the required parameter 'formType' when calling organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug,
        'formSlug': formSlug,
        'formType': formType
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'userSearchKey': opts['userSearchKey'],
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'continuationToken': opts['continuationToken'],
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi'),
        'sortOrder': opts['sortOrder'],
        'sortField': opts['sortField'],
        'withCount': opts['withCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ResultsWithPaginationModelPayment;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugPaymentsGet operation.
     * @callback module:api/PaiementsApi~organizationsOrganizationSlugPaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir les informations des paiements effectués sur une organisation
     * Retourne la liste des paiements selon les paramètres<br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
     * @param {String} organizationSlug The organization Slug
     * @param {Object} opts Optional parameters
     * @param {Date} [from] First Date Filter
     * @param {Date} [to] End Date Filter (exclusive)
     * @param {String} [userSearchKey] Filter results on user or payer first name, last name or email
     * @param {Number} [pageIndex = 1)] The page of results to retrieve
     * @param {Number} [pageSize = 20)] The number of items per page
     * @param {String} [continuationToken] Continuation Token from which we wish to retrieve results
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsPaymentState>} [states] The payment states  Available values: * `Pending` - A payment scheduled at a later date, not yet processed. * `Authorized` - The payment has been authorized, validated, processed. * `Refused` - The payment has been refused by the bank. * `Unknown` * `Registered` - Represents a payment made offline.              Probably for an item of type * `Refunded` - The payment has been refunded. * `Refunding` - The payment is being refunded. * `Contested` - Payment has been contested by the contributor
     * @param {module:model/HelloAssoApiV5ModelsEnumsSortOrder} [sortOrder] Sort payments by ascending or descending order. Default is descending
     * @param {module:model/HelloAssoApiV5ModelsEnumsSortField} [sortField] Sort payments by a specific field (Date or UpdateDate). Default is date
     * @param {Boolean} [withCount = false)] Whether the pagination should include totalCount and totalPages.
     * @param {module:api/PaiementsApi~organizationsOrganizationSlugPaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizationsOrganizationSlugPaymentsGet(organizationSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugPaymentsGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'userSearchKey': opts['userSearchKey'],
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'continuationToken': opts['continuationToken'],
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi'),
        'sortOrder': opts['sortOrder'],
        'sortField': opts['sortField'],
        'withCount': opts['withCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugPaymentsSearchGet operation.
     * @callback module:api/PaiementsApi~organizationsOrganizationSlugPaymentsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsWithPaginationModelPublicPaymentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rechercher des paiements.
     * Attention : Le compte total est désactivé, nous retournons la liste des paiements et le continuationToken. Recherchez des paiements basés sur de nombreux critères La recherche doit utiliser au moins l'un des suivants : - ID de l'organisation : paiements effectués pour cette organisation - Formulaire : Paiements effectués par ce formulaire en utilisant le couple ID du formulaire et type du formulaire - ID de l'utilisateur : Paiements effectués par cet utilisateur Et peut combiner autant de ces filtres. - États : Une liste d'états de paiement à filtrer. Aucun ou vide signifie que tous les paiements seront retournés - Plage de dates : En utilisant du et/ou au, la date est inclusive - Requête de recherche : Une liste de mots qui doivent être contenus soit sur les noms des payeurs ou des utilisateurs ou l'email - Montant du paiement : En centimes, qui doit exactement correspondre au montant des paiements (avec ou sans la contribution) L'ordre des résultats est également personnalisable : - Le champ de tri peut être la date, la date de mise à jour ou la date de création - L'ordre peut être ascendant ou descendant<br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
     * @param {String} organizationSlug The organization slug
     * @param {Object} opts Optional parameters
     * @param {Date} [from] First Date Filter
     * @param {Date} [to] End Date Filter (exclusive)
     * @param {Number} [pageSize = 20)] The number of items to retrieve
     * @param {String} [continuationToken] Continuation Token from which we wish to retrieve results
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsFormType>} [formTypes] The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
     * @param {module:model/HelloAssoApiV5ModelsEnumsFormType} [formType] The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId.
     * @param {Array.<module:model/HelloAssoApiV5ModelsEnumsPaymentState>} [states] Filter results by states of payments  Available values: * `Pending` - A payment scheduled at a later date, not yet processed. * `Authorized` - The payment has been authorized, validated, processed. * `Refused` - The payment has been refused by the bank. * `Unknown` * `Registered` - Represents a payment made offline.              Probably for an item of type * `Refunded` - The payment has been refunded. * `Refunding` - The payment is being refunded. * `Contested` - Payment has been contested by the contributor
     * @param {Number} [userId] The User identifier
     * @param {String} [searchKey] Filter results on user or payer first name, last name or email.
     * @param {Number} [amount] Amount of the payment in cents. Filter payments with exact amount with or without the contribution.
     * @param {module:model/HelloAssoApiV5ModelsEnumsSortOrder} [sortOrder] Sort payments by ascending or descending order. Default is descending
     * @param {module:model/HelloAssoApiV5ModelsEnumsSortField} [sortField] Sort payments by a specific field (Date or UpdateDate). Default is date
     * @param {module:api/PaiementsApi~organizationsOrganizationSlugPaymentsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsWithPaginationModelPublicPaymentModel}
     */
    organizationsOrganizationSlugPaymentsSearchGet(organizationSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugPaymentsSearchGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'pageSize': opts['pageSize'],
        'continuationToken': opts['continuationToken'],
        'formTypes': this.apiClient.buildCollectionParam(opts['formTypes'], 'multi'),
        'formType': opts['formType'],
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi'),
        'userId': opts['userId'],
        'searchKey': opts['searchKey'],
        'amount': opts['amount'],
        'sortOrder': opts['sortOrder'],
        'sortField': opts['sortField']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ResultsWithPaginationModelPublicPaymentModel;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/payments/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsPaymentIdGet operation.
     * @callback module:api/PaiementsApi~paymentsPaymentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoApiV5ModelsStatisticsPaymentDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir les informations détaillées d'un paiement.
     * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
     * @param {Number} paymentId The payment identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withFailedRefundOperation = false)] True to retrieve the refund operation in the states 'ABORTED', 'CANCELED', 'ERROR', 'REFUSED'.
     * @param {module:api/PaiementsApi~paymentsPaymentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoApiV5ModelsStatisticsPaymentDetail}
     */
    paymentsPaymentIdGet(paymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling paymentsPaymentIdGet");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
        'withFailedRefundOperation': opts['withFailedRefundOperation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoApiV5ModelsStatisticsPaymentDetail;
      return this.apiClient.callApi(
        '/payments/{paymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsPaymentIdRefundPost operation.
     * @callback module:api/PaiementsApi~paymentsPaymentIdRefundPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoApiV5ModelsPaymentRefundOperationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rembourser un paiement.
     * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
     * @param {Number} paymentId The payment identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [comment] The comment about this refund.
     * @param {Boolean} [cancelOrder = false)] Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded)
     * @param {Boolean} [sendRefundMail = true)] Whether a refund mail must be sent or not.
     * @param {Number} [amount = 0)] The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded
     * @param {module:api/PaiementsApi~paymentsPaymentIdRefundPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoApiV5ModelsPaymentRefundOperationModel}
     */
    paymentsPaymentIdRefundPost(paymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling paymentsPaymentIdRefundPost");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
        'comment': opts['comment'],
        'cancelOrder': opts['cancelOrder'],
        'sendRefundMail': opts['sendRefundMail'],
        'amount': opts['amount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoApiV5ModelsPaymentRefundOperationModel;
      return this.apiClient.callApi(
        '/payments/{paymentId}/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
