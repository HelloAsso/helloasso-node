/**
 * HelloAsso API
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationFiscalReceiptOptionsConfiguration from '../model/HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationFiscalReceiptOptionsConfiguration';

/**
* TaxReceipt service.
* @module api/TaxReceiptApi
* @version public
*/
export default class TaxReceiptApi {

    /**
    * Constructs a new TaxReceiptApi. 
    * @alias module:api/TaxReceiptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organizationsOrganizationSlugTaxReceiptConfigurationGet operation.
     * @callback module:api/TaxReceiptApi~organizationsOrganizationSlugTaxReceiptConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationFiscalReceiptOptionsConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <br/><br/><b>Your token must have one of these roles : </b><br/>OrganizationAdmin<br/><br/>If you are an <b>association</b>, you can obtain these roles with your client.<br/>If you are a <b>partner</b>, you can obtain these roles by the authorize flow.<br/><br/><b>Your clientId must be allowed all of those privileges : </b> <br/> OrganizationAdministration<br/><br/>
     * @param {String} organizationSlug 
     * @param {module:api/TaxReceiptApi~organizationsOrganizationSlugTaxReceiptConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationFiscalReceiptOptionsConfiguration}
     */
    organizationsOrganizationSlugTaxReceiptConfigurationGet(organizationSlug, callback) {
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugTaxReceiptConfigurationGet");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationFiscalReceiptOptionsConfiguration;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/tax-receipt/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugTaxReceiptConfigurationPut operation.
     * @callback module:api/TaxReceiptApi~organizationsOrganizationSlugTaxReceiptConfigurationPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <br/><br/><b>Your token must have one of these roles : </b><br/>OrganizationAdmin<br/><br/>If you are an <b>association</b>, you can obtain these roles with your client.<br/>If you are a <b>partner</b>, you can obtain these roles by the authorize flow.<br/><br/><b>Your clientId must be allowed all of those privileges : </b> <br/> OrganizationAdministration<br/><br/>
     * @param {String} organizationSlug 
     * @param {File} file Upload File
     * @param {Object} opts Optional parameters
     * @param {String} [config] config
     * @param {module:api/TaxReceiptApi~organizationsOrganizationSlugTaxReceiptConfigurationPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizationsOrganizationSlugTaxReceiptConfigurationPut(organizationSlug, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugTaxReceiptConfigurationPut");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling organizationsOrganizationSlugTaxReceiptConfigurationPut");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
        'file': file,
        'config': opts['config']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/tax-receipt/configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationSlugTaxReceiptPreviewPost operation.
     * @callback module:api/TaxReceiptApi~organizationsOrganizationSlugTaxReceiptPreviewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <br/><br/><b>Your token must have one of these roles : </b><br/>OrganizationAdmin<br/><br/>If you are an <b>association</b>, you can obtain these roles with your client.<br/>If you are a <b>partner</b>, you can obtain these roles by the authorize flow.<br/><br/><b>Your clientId must be allowed all of those privileges : </b> <br/> OrganizationAdministration<br/><br/>
     * @param {String} organizationSlug 
     * @param {File} file Upload File
     * @param {Object} opts Optional parameters
     * @param {String} [config] config
     * @param {module:api/TaxReceiptApi~organizationsOrganizationSlugTaxReceiptPreviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizationsOrganizationSlugTaxReceiptPreviewPost(organizationSlug, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationSlug' is set
      if (organizationSlug === undefined || organizationSlug === null) {
        throw new Error("Missing the required parameter 'organizationSlug' when calling organizationsOrganizationSlugTaxReceiptPreviewPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling organizationsOrganizationSlugTaxReceiptPreviewPost");
      }

      let pathParams = {
        'organizationSlug': organizationSlug
      };
      let queryParams = {
        'file': file,
        'config': opts['config']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationSlug}/tax-receipt/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
