/**
 * HelloAsso API
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HelloAssoApiV5ModelsDirectoryListOrganizationsRequest model module.
 * @module model/HelloAssoApiV5ModelsDirectoryListOrganizationsRequest
 * @version public
 */
class HelloAssoApiV5ModelsDirectoryListOrganizationsRequest {
    /**
     * Constructs a new <code>HelloAssoApiV5ModelsDirectoryListOrganizationsRequest</code>.
     * @alias module:model/HelloAssoApiV5ModelsDirectoryListOrganizationsRequest
     */
    constructor() { 
        
        HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HelloAssoApiV5ModelsDirectoryListOrganizationsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HelloAssoApiV5ModelsDirectoryListOrganizationsRequest} obj Optional instance to populate.
     * @return {module:model/HelloAssoApiV5ModelsDirectoryListOrganizationsRequest} The populated <code>HelloAssoApiV5ModelsDirectoryListOrganizationsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HelloAssoApiV5ModelsDirectoryListOrganizationsRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('zipCodes')) {
                obj['zipCodes'] = ApiClient.convertToType(data['zipCodes'], ['String']);
            }
            if (data.hasOwnProperty('cities')) {
                obj['cities'] = ApiClient.convertToType(data['cities'], ['String']);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('departments')) {
                obj['departments'] = ApiClient.convertToType(data['departments'], ['String']);
            }
            if (data.hasOwnProperty('fiscalReceiptEligibility')) {
                obj['fiscalReceiptEligibility'] = ApiClient.convertToType(data['fiscalReceiptEligibility'], 'Boolean');
            }
            if (data.hasOwnProperty('internalTags')) {
                obj['internalTags'] = ApiClient.convertToType(data['internalTags'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('linkedPartners')) {
                obj['linkedPartners'] = ApiClient.convertToType(data['linkedPartners'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HelloAssoApiV5ModelsDirectoryListOrganizationsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HelloAssoApiV5ModelsDirectoryListOrganizationsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zipCodes'])) {
            throw new Error("Expected the field `zipCodes` to be an array in the JSON data but got " + data['zipCodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cities'])) {
            throw new Error("Expected the field `cities` to be an array in the JSON data but got " + data['cities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['departments'])) {
            throw new Error("Expected the field `departments` to be an array in the JSON data but got " + data['departments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['internalTags'])) {
            throw new Error("Expected the field `internalTags` to be an array in the JSON data but got " + data['internalTags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['linkedPartners'])) {
            throw new Error("Expected the field `linkedPartners` to be an array in the JSON data but got " + data['linkedPartners']);
        }

        return true;
    }


}



/**
 * Textual search for organization name
 * @member {String} name
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['name'] = undefined;

/**
 * Textual search for organization description
 * @member {String} description
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['description'] = undefined;

/**
 * The categories of the organizations
 * @member {Array.<String>} categories
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['categories'] = undefined;

/**
 * The organization types
 * @member {Array.<String>} types
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['types'] = undefined;

/**
 * The zip codes where the organizations are located
 * @member {Array.<String>} zipCodes
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['zipCodes'] = undefined;

/**
 * The cities where the organizations are located
 * @member {Array.<String>} cities
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['cities'] = undefined;

/**
 * The regions where the organizations are located
 * @member {Array.<String>} regions
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['regions'] = undefined;

/**
 * The departments where the organizations are located
 * @member {Array.<String>} departments
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['departments'] = undefined;

/**
 * Allow only organization with a fiscal receipt eligibility
 * @member {Boolean} fiscalReceiptEligibility
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['fiscalReceiptEligibility'] = undefined;

/**
 * Allow only Organization with internal tags  this filter is for special operations only
 * @member {Array.<String>} internalTags
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['internalTags'] = undefined;

/**
 * Allow only Organization with public tags
 * @member {Array.<String>} tags
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['tags'] = undefined;

/**
 * Allow only Organization with linked partners
 * @member {Array.<String>} linkedPartners
 */
HelloAssoApiV5ModelsDirectoryListOrganizationsRequest.prototype['linkedPartners'] = undefined;






export default HelloAssoApiV5ModelsDirectoryListOrganizationsRequest;

