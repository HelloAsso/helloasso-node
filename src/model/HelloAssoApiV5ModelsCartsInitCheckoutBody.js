/**
 * HelloAsso API
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HelloAssoApiV5ModelsCartsCheckoutPayer from './HelloAssoApiV5ModelsCartsCheckoutPayer';
import HelloAssoApiV5ModelsCartsCheckoutTerm from './HelloAssoApiV5ModelsCartsCheckoutTerm';

/**
 * The HelloAssoApiV5ModelsCartsInitCheckoutBody model module.
 * @module model/HelloAssoApiV5ModelsCartsInitCheckoutBody
 * @version public
 */
class HelloAssoApiV5ModelsCartsInitCheckoutBody {
    /**
     * Constructs a new <code>HelloAssoApiV5ModelsCartsInitCheckoutBody</code>.
     * @alias module:model/HelloAssoApiV5ModelsCartsInitCheckoutBody
     * @param totalAmount {Number} Total amount, all taxes included, in cents (required)  Must be equal to the sum of the initial amount and subsequent terms
     * @param initialAmount {Number} The amount for the first term, all taxes included, in cents (required)
     * @param itemName {String} Item name (required)  A text describing what the user paid for ('Renew license', '3 tickets', donation, etc).  Will be displayed in the near future in the user space and in the organization back office
     * @param backUrl {String} Url followed by the contributor if he wants to return to its previous site
     * @param errorUrl {String} Url called in case of an error during the checkout process
     * @param returnUrl {String} Url called after the payment
     * @param containsDonation {Boolean} The sale (or a part of) is a donation
     */
    constructor(totalAmount, initialAmount, itemName, backUrl, errorUrl, returnUrl, containsDonation) { 
        
        HelloAssoApiV5ModelsCartsInitCheckoutBody.initialize(this, totalAmount, initialAmount, itemName, backUrl, errorUrl, returnUrl, containsDonation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, totalAmount, initialAmount, itemName, backUrl, errorUrl, returnUrl, containsDonation) { 
        obj['totalAmount'] = totalAmount;
        obj['initialAmount'] = initialAmount;
        obj['itemName'] = itemName;
        obj['backUrl'] = backUrl;
        obj['errorUrl'] = errorUrl;
        obj['returnUrl'] = returnUrl;
        obj['containsDonation'] = containsDonation;
    }

    /**
     * Constructs a <code>HelloAssoApiV5ModelsCartsInitCheckoutBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HelloAssoApiV5ModelsCartsInitCheckoutBody} obj Optional instance to populate.
     * @return {module:model/HelloAssoApiV5ModelsCartsInitCheckoutBody} The populated <code>HelloAssoApiV5ModelsCartsInitCheckoutBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HelloAssoApiV5ModelsCartsInitCheckoutBody();

            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'Number');
            }
            if (data.hasOwnProperty('initialAmount')) {
                obj['initialAmount'] = ApiClient.convertToType(data['initialAmount'], 'Number');
            }
            if (data.hasOwnProperty('itemName')) {
                obj['itemName'] = ApiClient.convertToType(data['itemName'], 'String');
            }
            if (data.hasOwnProperty('backUrl')) {
                obj['backUrl'] = ApiClient.convertToType(data['backUrl'], 'String');
            }
            if (data.hasOwnProperty('errorUrl')) {
                obj['errorUrl'] = ApiClient.convertToType(data['errorUrl'], 'String');
            }
            if (data.hasOwnProperty('returnUrl')) {
                obj['returnUrl'] = ApiClient.convertToType(data['returnUrl'], 'String');
            }
            if (data.hasOwnProperty('containsDonation')) {
                obj['containsDonation'] = ApiClient.convertToType(data['containsDonation'], 'Boolean');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = ApiClient.convertToType(data['terms'], [HelloAssoApiV5ModelsCartsCheckoutTerm]);
            }
            if (data.hasOwnProperty('payer')) {
                obj['payer'] = HelloAssoApiV5ModelsCartsCheckoutPayer.constructFromObject(data['payer']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HelloAssoApiV5ModelsCartsInitCheckoutBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HelloAssoApiV5ModelsCartsInitCheckoutBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HelloAssoApiV5ModelsCartsInitCheckoutBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['itemName'] && !(typeof data['itemName'] === 'string' || data['itemName'] instanceof String)) {
            throw new Error("Expected the field `itemName` to be a primitive type in the JSON string but got " + data['itemName']);
        }
        // ensure the json data is a string
        if (data['backUrl'] && !(typeof data['backUrl'] === 'string' || data['backUrl'] instanceof String)) {
            throw new Error("Expected the field `backUrl` to be a primitive type in the JSON string but got " + data['backUrl']);
        }
        // ensure the json data is a string
        if (data['errorUrl'] && !(typeof data['errorUrl'] === 'string' || data['errorUrl'] instanceof String)) {
            throw new Error("Expected the field `errorUrl` to be a primitive type in the JSON string but got " + data['errorUrl']);
        }
        // ensure the json data is a string
        if (data['returnUrl'] && !(typeof data['returnUrl'] === 'string' || data['returnUrl'] instanceof String)) {
            throw new Error("Expected the field `returnUrl` to be a primitive type in the JSON string but got " + data['returnUrl']);
        }
        if (data['terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['terms'])) {
                throw new Error("Expected the field `terms` to be an array in the JSON data but got " + data['terms']);
            }
            // validate the optional field `terms` (array)
            for (const item of data['terms']) {
                HelloAssoApiV5ModelsCartsCheckoutTerm.validateJSON(item);
            };
        }
        // validate the optional field `payer`
        if (data['payer']) { // data not null
          HelloAssoApiV5ModelsCartsCheckoutPayer.validateJSON(data['payer']);
        }

        return true;
    }


}

HelloAssoApiV5ModelsCartsInitCheckoutBody.RequiredProperties = ["totalAmount", "initialAmount", "itemName", "backUrl", "errorUrl", "returnUrl", "containsDonation"];

/**
 * Total amount, all taxes included, in cents (required)  Must be equal to the sum of the initial amount and subsequent terms
 * @member {Number} totalAmount
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['totalAmount'] = undefined;

/**
 * The amount for the first term, all taxes included, in cents (required)
 * @member {Number} initialAmount
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['initialAmount'] = undefined;

/**
 * Item name (required)  A text describing what the user paid for ('Renew license', '3 tickets', donation, etc).  Will be displayed in the near future in the user space and in the organization back office
 * @member {String} itemName
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['itemName'] = undefined;

/**
 * Url followed by the contributor if he wants to return to its previous site
 * @member {String} backUrl
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['backUrl'] = undefined;

/**
 * Url called in case of an error during the checkout process
 * @member {String} errorUrl
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['errorUrl'] = undefined;

/**
 * Url called after the payment
 * @member {String} returnUrl
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['returnUrl'] = undefined;

/**
 * The sale (or a part of) is a donation
 * @member {Boolean} containsDonation
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['containsDonation'] = undefined;

/**
 * The list of future terms (if applicable)
 * @member {Array.<module:model/HelloAssoApiV5ModelsCartsCheckoutTerm>} terms
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['terms'] = undefined;

/**
 * @member {module:model/HelloAssoApiV5ModelsCartsCheckoutPayer} payer
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['payer'] = undefined;

/**
 * Metadata (optional)  Json object (max length : 20000)
 * @member {Object} metadata
 */
HelloAssoApiV5ModelsCartsInitCheckoutBody.prototype['metadata'] = undefined;






export default HelloAssoApiV5ModelsCartsInitCheckoutBody;

